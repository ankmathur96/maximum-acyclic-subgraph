import sys

instanceSizes = [66,100,25,100,10,100,99,100,100,100,100,24,100,100,100,100,
100,27,100,33,100,20,98,21,50,100,100,100,100,100,100,100,100,100,96,100,90,
100,100,100,100,41,100,51,9,100,100,100,100,100,100,100,19,100,100,10,100,100,
100,100,100,100,100,100,100,7,62,100,100,100,100,100,100,100,100,100,100,10,
100,100,100,100,30,10,100,25,100,100,100,100,100,100,20,100,100,100,100,100,
100,100,6,100,18,17,15,100,12,50,57,100,20,100,20,100,100,100,100,10,100,100,
100,100,97,87,100,92,100,88,99,72,100,100,85,100,100,97,100,100,100,99,97,100,
100,20,80,97,63,100,100,100,4,40,17,100,100,100,80,100,100,100,100,100,89,100,
100,97,100,100,4,100,100,100,7,99,99,50,100,96,10,100,100,100,100,72,100,100,
100,100,81,100,93,100,100,100,100,6,100,27,100,100,100,100,100,97,20,100,100,
100,99,100,100,100,100,100,95,100,100,7,100,100,100,100,100,100,100,99,100,100,
100,100,87,100,65,100,99,100,100,100,100,25,100,26,97,72,90,100,100,100,100,
100,100,100,100,100,100,99,7,100,100,40,54,100,100,100,100,100,50,100,100,50,
64,5,100,100,100,100,100,5,23,7,100,100,100,100,100,100,81,100,10,100,20,85,
100,48,9,100,100,99,100,76,100,100,5,100,40,100,100,60,97,100,100,100,100,100,
100,100,100,100,10,100,100,80,23,6,100,100,100,100,4,100,100,10,100,100,100,
100,100,50,2,100,100,100,100,100,100,8,100,100,100,15,100,100,100,100,100,100,
100,6,100,99,100,100,100,100,97,100,97,100,87,100,100,100,100,100,100,100,100,
100,100,100,20,100,14,27,100,100,100,100,100,100,100,100,100,85,100,99,6,100,
40,100,100,100,100,100,90,100,100,100,6,100,100,80,100,70,7,100,100,100,100,9,
8,100,20,100,100,100,91,100,96,100,100,100,100,100,100,100,100,100,100,100,100,
10,60,100,64,100,50,100,100,100,100,100,100,100,100,100,100,100,100,50,100,100,
100,99,100,100,100,73,100,100,85,100,100,100,21,99,100,100,100,100,100,50,100,
100,70,100,50,100,100,100,100,100,97,100,100,100,100,100,100,100,100,100,100,
56,9,100,100,100,100,100,80,100,100,10,100,98,100,100,100,10,100,100,100,90,15,
100,100,100,99,100,97,100,6,100,10,100,100,100,100,100,100,99,10,100,97,100,
100,100,100,100,100,45,100,98,100,50,100,100,100,73,32,100,100,93,32,100,100,
25,8,100,7,100,100,95,100,98,100,100,46,81,100,100,5,100,100,100,100,50,60,40,
85,100,100,20,76,100,100,100,100,100,93,100,100,100,85,100,100,100,9,100,100,
100,6,100,100,100,100,100,60,100,100]

def main(argv):
	if len(argv) != 1:
		print "Usage: python solutions_validator.py [path_to_input_file]"
		return
	allPassed = True
	lineIndex = 0
	with open(argv[0], "r") as f:
		for line in f:
			if lineIndex >= len(instanceSizes):
				print "Extra data at end of file"
				return
			result = processTest(line.split(), instanceSizes[lineIndex])
			if result != "solution ok":
				print "Error with test " + str(lineIndex + 1) + ": " + result
				allPassed = False
			lineIndex += 1
	if lineIndex < len(instanceSizes):
		print "File terminated early; missing lines"
		return
	if allPassed:
                print "all solution lines ok"

def processTest(line, N):
	if len(line) != N:
		return "Line must contain " + str(N) + " integers."
	b = [False for i in range(N)]
	for v in line:
		if not v.isdigit():
			return "Line must contain " + str(N) + " integers."
		vertex = int(v) - 1
		if vertex < 0 or vertex >= N:
			return "Each integer must be between 1 and " + str(N) + ", inclusive."
		if b[vertex]:
			return "Each integer in the range 1 to " + str(N) + " must appear exactly once."
		b[vertex] = True
	if not all(b):
		return "Each integer in the range 1 to " + str(N) + " must appear exactly once."

	return "solution ok"

if __name__ == '__main__':
	main(sys.argv[1:])